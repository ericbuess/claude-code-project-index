{"v":"3.0","at":"2025-08-21T23:40:40.963423","root":".","tree":[".","\u251c\u2500\u2500 scripts/ (6 files)","\u251c\u2500\u2500 tests/ (4 files)","\u2514\u2500\u2500 README.md"],"stats":{"total_files":9,"total_directories":4,"fully_parsed":{"shell":1,"python":4},"listed_only":{"json":1,"shell":3},"markdown_files":3},"f":{"s/find_python.sh":["s",["find_python:0:()::"]],"s/index_aware_hook.py":["p",["find_project_root:23:()::Find project root by looking for .git or common project markers.","get_last_interactive_size:45:():find_project_root:Get the last remembered -i size from the index.","parse_index_flag:66:(prompt):get_last_interactive_size:Parse -i or -ic flag with optional size.","calculate_files_hash:104:(project_root)::Calculate hash of non-ignored files to detect changes.","should_regenerate_index:141:(project_root, index_path, requested_size_k):calculate_files_hash:Determine if index needs regeneration.","generate_index_at_size:173:(project_root, target_size_k, is_clipboard_mode=False):calculate_files_hash:Generate index at specific token size.","copy_to_clipboard:259:(prompt, index_path)::Copy prompt, instructions, and index to clipboard for external AI.","main:566:():copy_to_clipboard,find_project_root,generate_index_at_size,parse_index_flag,should_regenerate_index:Process UserPromptSubmit hook for -i and -ic flag detection."]],"s/index_utils.py":["p",["extract_function_calls_python:73:(body:str, all_functions:Set[str])>List[str]::Extract function calls from Python code body.","extract_function_calls_javascript:103:(body:str, all_functions:Set[str])>List[str]::Extract function calls from JavaScript/TypeScript code body.","build_call_graph:131:(functions:Dict, classes:Dict)>Tuple[Dict, Dict]::Build bidirectional call graph from extracted functions and methods.","extract_python_signatures:160:(content:str)>Dict[str, Dict]:extract_function_calls_python:Extract Python function and class signatures with full details for all files.","extract_javascript_signatures:544:(content:str)>Dict[str, any]:extract_function_calls_javascript,pos_to_line:Extract JavaScript/TypeScript function and class signatures with full details.","extract_function_calls_shell:905:(body:str, all_functions:Set[str])>List[str]::Extract function calls from shell script body.","extract_shell_signatures:927:(content:str)>Dict[str, any]:extract_function_calls_shell:Extract shell script function signatures and structure.","extract_markdown_structure:1185:(file_path:Path)>Dict[str, List[str]]::Extract headers and architectural hints from markdown files.","infer_file_purpose:1216:(file_path:Path)>Optional[str]::Infer the purpose of a file from its name and location.","infer_directory_purpose:1239:(path:Path, files_within:List[str])>Optional[str]::Infer directory purpose from naming patterns and contents.","get_language_name:1269:(extension:str)>str::Get readable language name from extension.","parse_gitignore:1280:(gitignore_path:Path)>List[str]::Parse a .gitignore file and return list of patterns.","load_gitignore_patterns:1300:(root_path:Path)>Set[str]:parse_gitignore:Load all gitignore patterns from project root and merge with defaults.","matches_gitignore_pattern:1323:(path:Path, patterns:Set[str], root_path:Path)>bool::Check if a path matches any gitignore pattern.","should_index_file:1367:(path:Path, root_path:Path = None)>bool:load_gitignore_patterns,matches_gitignore_pattern:Check if we should index this file.","get_git_files:1387:(root_path:Path)>Optional[List[Path]]::"]],"s/project_index.py":["p",["generate_tree_structure:40:(root_path:Path, max_depth:int = MAX_TREE_DEPTH)>List[str]:add_tree_level,should_include_dir:Generate a compact ASCII tree representation of the directory structure.","build_index:109:(root_dir:str)>Tuple[Dict, int]:generate_tree_structure:Build the enhanced index with architectural awareness.","convert_to_enhanced_dense_format:402:(index:Dict)>Dict:truncate_doc:Convert to enhanced dense format that preserves all AI-relevant information.","compress_if_needed:528:(dense_index:Dict, target_size:int = MAX_INDEX_SIZE)>Dict::Compress dense index further if it exceeds size limit.","print_summary:621:(index:Dict, skipped_count:int)::Print a helpful summary of what was indexed.","main:669:():build_index,compress_if_needed,convert_to_enhanced_dense_format,print_summary:Run the enhanced indexer."]],"s/reindex_if_needed.py":["p",["check_index_features:21:(index_path)::Check if index has all required features.","check_index_staleness:39:(index_path, threshold_hours=24)::Check if index is older than threshold.","check_missing_documentation:52:(index_path, project_root)::Check if important documentation files are missing from index.","check_structural_changes:73:(index_path, project_root)::Check if directory structure has significantly changed.","count_hook_updates:98:(index_path)::Count how many files were updated by hooks vs full index.","run_reindex:117:(project_root)::Run the project_index.py script to perform full reindex.","main:183:():check_index_features,check_index_staleness,check_missing_documentation,check_structural_changes,count_hook_updates,run_reindex:Main hook entry point."]]},"g":[["extract_javascript_signatures","pos_to_line"],["generate_tree_structure","should_include_dir"],["main","build_index"],["main","generate_index_at_size"],["main","convert_to_enhanced_dense_format"],["should_index_file","load_gitignore_patterns"],["convert_to_enhanced_dense_format","truncate_doc"],["main","check_index_staleness"],["main","compress_if_needed"],["extract_python_signatures","extract_function_calls_python"],["main","print_summary"],["should_index_file","matches_gitignore_pattern"],["main","count_hook_updates"],["main","check_structural_changes"],["main","check_missing_documentation"],["main","find_project_root"],["parse_index_flag","get_last_interactive_size"],["main","run_reindex"],["main","check_index_features"],["should_regenerate_index","calculate_files_hash"],["get_last_interactive_size","find_project_root"],["load_gitignore_patterns","parse_gitignore"],["main","parse_index_flag"],["build_index","generate_tree_structure"],["extract_javascript_signatures","extract_function_calls_javascript"],["generate_tree_structure","add_tree_level"],["main","copy_to_clipboard"],["generate_index_at_size","calculate_files_hash"],["main","should_regenerate_index"],["extract_shell_signatures","extract_function_calls_shell"]],"d":{".claude-code-ericbuess/CONTEXT_STATE.md":["\ud83d\udd04 Auto-Generated Context State","\ud83d\udccd Current Session","\ud83d\udcca Git Status","\ud83d\udcdd Recently Modified Files","\ud83d\udccc Context Notes"],".claude/agents/index-analyzer.md":["YOUR PRIMARY DIRECTIVE","ENHANCED DENSE FORMAT (v3.0)","ULTRATHINKING FRAMEWORK","Understanding Intent","Code Relationship Analysis","Strategic Recommendations","OUTPUT FORMAT","\ud83e\udde0 Code Intelligence Analysis","UNDERSTANDING YOUR REQUEST","ESSENTIAL CODE PATHS"],"README.md":["Project Index for Claude Code (v0.2.0-beta)","\ud83d\ude80 Quick Install","\ud83d\udcd6 Usage","No Manual Setup Required!","Simply add -i to any prompt","Using the Index","Add -i flag to any prompt","Reference directly in your prompt","Or auto-load in every session by adding to CLAUDE.md:","Add @PROJECT_INDEX.json to your CLAUDE.md file"]},"deps":{"scripts/index_aware_hook.py":["json","sys","os","re","subprocess","hashlib","time","pathlib","datetime","sys","vm_client_network","vm_client","base64","pyperclip"],"scripts/index_utils.py":["re","fnmatch","pathlib","typing","subprocess"],"scripts/project_index.py":["json","os","re","datetime","pathlib","typing","index_utils","index_utils","sys"],"scripts/reindex_if_needed.py":["json","sys","os","subprocess","pathlib","datetime"]},"dir_purposes":{"scripts":"Build and utility scripts"},"staleness":1755232840.983388}
{"at":"2025-08-31T20:47:45.313042","root":".","tree":[".","\u251c\u2500\u2500 scripts/ (7 files)","\u2514\u2500\u2500 README.md"],"stats":{"total_files":11,"total_directories":2,"fully_parsed":{"python":6,"shell":1},"listed_only":{"json":1,"shell":3},"markdown_files":2,"embeddings_generated":0},"f":{"s/similarity_index.py":["p",["get_similarity_algorithm:113:(algorithm_name:str, weights:List[float] = None)>Callable[[List[float], List[float]], float]:weighted_cosine_similarity:Get similarity algorithm function by name.","load_weights:130:(weights_path:str)>List[float]::Load weights from JSON file.","load_project_index:148:(index_path:str = \"PROJECT_INDEX.json\")>Dict::Load PROJECT_INDEX.json with embeddings.","calculate_embedding_hash:163:(embeddings:List[Dict])>str::Calculate hash of all embeddings to detect changes.","extract_embeddings_from_index:173:(index:Dict)>List[Dict]::Extract all embeddings with metadata from the project index.","generate_embedding_for_query:227:(query:str, model_name:str = \"nomic-embed-text\", endpoint:str = \"http://localhost:11434\")>Optional[List[float]]::Generate embedding for a query string.","build_similarity_cache:249:(embeddings:List[Dict], algorithms:List[str], similarity_threshold:float = 0.5, duplicate_threshold:float = 0.9, top_k:int = 10, weights:List[float] = None)>Dict:calculate_embedding_hash,find_duplicates_internal,get_similarity_algorithm:Build similarity cache for all specified algorithms.","find_duplicates_internal:322:(embeddings:List[Dict], similarity_func:Callable, threshold:float)>List[Dict]::Find duplicate groups using the specified similarity function.","query_from_cache:365:(query:str, index:Dict, algorithm:str = 'cosine', top_k:int = 10, threshold:float = 0.5, endpoint:str = \"http://localhost:11434\", model_name:str = \"nomic-embed-text\")>List[Tuple[Dict, float]]:extract_embeddings_from_index,generate_embedding_for_query,get_similarity_algorithm:Query similarities using cached data for speed.","save_enhanced_index:399:(index:Dict, output_path:str)::Save enhanced index with similarity cache to file.","print_cache_stats:410:(cache:Dict)::Print statistics about the similarity cache.","print_query_results:424:(results:List[Tuple[Dict, float]], query:str = None, algorithm:str = 'cosine')::Print similarity search results.","print_cached_duplicates:456:(cache:Dict, algorithm:str = 'cosine')::Print duplicate groups from cache.","main:480:()::Main similarity search interface."],{"SimilarityAlgorithms":["31",["cosine_similarity:35:(vec1:List[float], vec2:List[float])>float::Calculate cosine similarity between two vectors (default algorithm).","euclidean_similarity:50:(vec1:List[float], vec2:List[float])>float::Calculate similarity based on Euclidean distance.","manhattan_similarity:59:(vec1:List[float], vec2:List[float])>float::Calculate similarity based on Manhattan distance.","dot_product_similarity:68:(vec1:List[float], vec2:List[float])>float::Calculate raw dot product similarity.","jaccard_similarity:77:(vec1:List[float], vec2:List[float], threshold:float = 0.1)>float::Calculate Jaccard similarity by treating vectors as binary.","weighted_cosine_similarity:94:(vec1:List[float], vec2:List[float], weights:List[float] = None)>float:cosine_similarity:Calculate weighted cosine similarity."]]}],"test_embeddings.py":["p",["test_ollama_connection:13:()::Check if Ollama is running and accessible.","test_embedding_generation:32:()::Test generating an embedding for sample code.","test_index_with_embeddings:69:()::Test generating PROJECT_INDEX with embeddings.","hello_world:78:()::Say hello to the world.","main:142:():test_embedding_generation,test_index_with_embeddings,test_ollama_connection:"],{"Greeter":["83",["greet:86:(self, name:str)>str::Greet someone by name."]]}],"s/find_python.sh":["s",["find_python:0:()::"]],"s/i_flag_hook.py":["p",["ensure_ollama_for_embeddings:25:()::","find_project_root:69:()::Find project root by looking for .git or common project markers.","get_last_interactive_size:91:():find_project_root:Get the last remembered -i size from the index.","parse_index_flag:112:(prompt):get_last_interactive_size:","calculate_files_hash:154:(project_root)::Calculate hash of non-ignored files to detect changes.","should_regenerate_index:191:(project_root, index_path, requested_size_k, require_embeddings=False):calculate_files_hash:","generate_index_at_size:230:(project_root, target_size_k, is_clipboard_mode=False, include_embeddings=False):calculate_files_hash:","copy_to_clipboard:325:(prompt, index_path)::Copy prompt, instructions, and index to clipboard for external AI.","main:632:():copy_to_clipboard,ensure_ollama_for_embeddings,find_project_root,generate_index_at_size,parse_index_flag,should_regenerate_index:Process UserPromptSubmit hook for -i, -ic, and -ie flag detection."]],"s/index_utils.py":["p",["extract_function_calls_python:74:(body:str, all_functions:Set[str])>List[str]::Extract function calls from Python code body.","extract_function_calls_javascript:104:(body:str, all_functions:Set[str])>List[str]::Extract function calls from JavaScript/TypeScript code body.","build_call_graph:132:(functions:Dict, classes:Dict)>Tuple[Dict, Dict]::Build bidirectional call graph from extracted functions and methods.","extract_python_signatures:161:(content:str)>Dict[str, Dict]:extract_function_calls_python:Extract Python function and class signatures with full details for all files.","extract_javascript_signatures:545:(content:str)>Dict[str, any]:extract_function_calls_javascript,pos_to_line:Extract JavaScript/TypeScript function and class signatures with full details.","extract_function_calls_shell:906:(body:str, all_functions:Set[str])>List[str]::Extract function calls from shell script body.","extract_shell_signatures:928:(content:str)>Dict[str, any]:extract_function_calls_shell:Extract shell script function signatures and structure.","extract_markdown_structure:1186:(file_path:Path)>Dict[str, List[str]]::Extract headers and architectural hints from markdown files.","infer_file_purpose:1217:(file_path:Path)>Optional[str]::Infer the purpose of a file from its name and location.","infer_directory_purpose:1240:(path:Path, files_within:List[str])>Optional[str]::Infer directory purpose from naming patterns and contents.","get_language_name:1270:(extension:str)>str::Get readable language name from extension.","parse_gitignore:1281:(gitignore_path:Path)>List[str]::Parse a .gitignore file and return list of patterns.","load_gitignore_patterns:1301:(root_path:Path)>Set[str]:parse_gitignore:Load all gitignore patterns from project root and merge with defaults.","matches_gitignore_pattern:1324:(path:Path, patterns:Set[str], root_path:Path)>bool::Check if a path matches any gitignore pattern.","should_index_file:1368:(path:Path, root_path:Path = None)>bool:load_gitignore_patterns,matches_gitignore_pattern:Check if we should index this file.","get_git_files:1388:(root_path:Path)>Optional[List[Path]]::"]],"s/project_index.py":["p",["generate_embedding:42:(text:str, model_name:str = None, endpoint:str = None)>Optional[List[float]]::","generate_tree_structure:74:(root_path:Path, max_depth:int = MAX_TREE_DEPTH)>List[str]:add_tree_level,should_include_dir:Generate a compact ASCII tree representation of the directory structure.","build_index:143:(root_dir:str)>Tuple[Dict, int]:generate_embedding,generate_tree_structure:Build the enhanced index with architectural awareness.","convert_to_enhanced_dense_format:501:(index:Dict)>Dict:truncate_doc:Convert to enhanced dense format that preserves all AI-relevant information.","compress_if_needed:626:(dense_index:Dict, target_size:int = MAX_INDEX_SIZE)>Dict::Compress dense index further if it exceeds size limit.","print_summary:757:(index:Dict, skipped_count:int)::Print a helpful summary of what was indexed.","main:809:():build_index,compress_if_needed,convert_to_enhanced_dense_format,print_summary:Run the enhanced indexer."]],"s/stop_hook.py":["p",["main:14:()::Stop hook - regenerate index if PROJECT_INDEX.json exists."]]},"g":[["build_similarity_cache","calculate_embedding_hash"],["query_from_cache","get_similarity_algorithm"],["get_similarity_algorithm","SimilarityAlgorithms.weighted_cosine_similarity"],["main","ensure_ollama_for_embeddings"],["SimilarityAlgorithms.weighted_cosine_similarity","SimilarityAlgorithms.cosine_similarity"],["should_regenerate_index","calculate_files_hash"],["main","test_index_with_embeddings"],["main","test_embedding_generation"],["main","compress_if_needed"],["SimilarityAlgorithms.weighted_cosine_similarity","cosine_similarity"],["generate_tree_structure","add_tree_level"],["generate_index_at_size","calculate_files_hash"],["main","parse_index_flag"],["main","build_index"],["load_gitignore_patterns","parse_gitignore"],["query_from_cache","generate_embedding_for_query"],["extract_shell_signatures","extract_function_calls_shell"],["main","print_summary"],["build_similarity_cache","get_similarity_algorithm"],["build_similarity_cache","find_duplicates_internal"],["get_last_interactive_size","find_project_root"],["should_index_file","load_gitignore_patterns"],["main","test_ollama_connection"],["main","find_project_root"],["extract_python_signatures","extract_function_calls_python"],["convert_to_enhanced_dense_format","truncate_doc"],["generate_tree_structure","should_include_dir"],["build_index","generate_embedding"],["main","should_regenerate_index"],["main","copy_to_clipboard"],["get_similarity_algorithm","weighted_cosine_similarity"],["extract_javascript_signatures","extract_function_calls_javascript"],["parse_index_flag","get_last_interactive_size"],["extract_javascript_signatures","pos_to_line"],["main","convert_to_enhanced_dense_format"],["main","generate_index_at_size"],["build_index","generate_tree_structure"],["query_from_cache","extract_embeddings_from_index"],["should_index_file","matches_gitignore_pattern"]],"d":{".claude-code-ericbuess/CONTEXT_STATE.md":["\ud83d\udd04 Auto-Generated Context State","\ud83d\udccd Current Session","\ud83d\udcca Git Status","\ud83d\udcdd Recently Modified Files","\ud83d\udccc Context Notes"],"README.md":["Project Index for Claude Code","Background","Quick Install","Usage","Or manually create/update the index anytime","What It Does","Three Ways to Use","Small Projects - Direct Reference with `@PROJECT_INDEX.json`","Reference directly in your prompt","Or auto-load in every session by adding to CLAUDE.md:"]},"deps":{"scripts/similarity_index.py":["json","math","argparse","sys","urllib.request","urllib.error","hashlib","datetime","pathlib","typing"],"test_embeddings.py":["json","os","sys","subprocess","pathlib","urllib.request","urllib.error","urllib.request","urllib.error"],"scripts/i_flag_hook.py":["json","sys","os","re","subprocess","hashlib","time","urllib.request","urllib.error","pathlib","datetime","json","sys","vm_client_network","vm_client","base64","pyperclip"],"scripts/index_utils.py":["re","fnmatch","pathlib","typing","subprocess"],"scripts/project_index.py":["json","os","re","urllib.request","urllib.error","datetime","pathlib","typing","index_utils","index_utils","sys","argparse"],"scripts/stop_hook.py":["json","sys","os","subprocess","pathlib"]},"dir_purposes":{"scripts":"Build and utility scripts"},"staleness":1756090065.412723}